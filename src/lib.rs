use pest::Parser;
use pest_derive::Parser;
use thiserror::Error;

/// The `ArithmeticParser` is a parser generated by `pest`
/// based on the grammar defined in `grammar.pest`.
/// 
/// It is designed to parse arithmetic expressions and generate
/// a parse tree according to the rules specified in the grammar file.
#[derive(Parser)]
#[grammar = "grammar.pest"]
pub struct ArithmeticParser;

/// The `ParseError` enum represents errors that can occur
/// during the parsing of arithmetic expressions.
///
/// It wraps errors produced by the `pest` library.
#[derive(Debug, Error)]
pub enum ParseError {
    /// Error that occurs when parsing fails, wrapping the `pest` error.
    #[error("Failed to parse the arithmetic expression")]
    PestError(#[from] pest::error::Error<Rule>),
}

/// Parses an arithmetic expression and prints its parse tree.
///
/// # Arguments
///
/// - `input`: A string slice containing the arithmetic expression to parse.
///
/// # Returns
///
/// - `Ok(())` if the parsing is successful.
/// - `Err(ParseError)` if an error occurs during parsing.
///
/// # Example
///
/// ```rust
/// use your_crate::parse_expression;
///
/// let input = "3 + 5 * 2";
/// match parse_expression(input) {
///     Ok(_) => println!("Parse successful!"),
///     Err(e) => eprintln!("Parse error: {}", e),
/// }
/// ```
pub fn parse_expression(input: &str) -> Result<(), ParseError> {
    let pairs = ArithmeticParser::parse(Rule::expression, input)?;

    print_parse_tree(pairs, 0);
    Ok(())
}

/// Recursively prints the parse tree of the given `pairs` from `pest`.
///
/// # Arguments
///
/// - `pairs`: The `pest::iterators::Pairs` object representing the parse tree.
/// - `depth`: The current depth of the recursion for pretty-printing purposes.
///
/// This function is primarily for debugging and educational purposes,
/// as it visualizes the structure of the parsed input.
fn print_parse_tree(pairs: pest::iterators::Pairs<Rule>, depth: usize) {
    for pair in pairs {
        for _ in 0..depth {
            print!("  ");
        }

        println!("{:?}: {:?}", pair.as_rule(), pair.as_str());

        print_parse_tree(pair.into_inner(), depth + 1);
    }
}
